#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>

#define MAX_CHILDREN 10  // Maximum number of child processes

int no_child = 0;  // Number of currently active child processes

void handle_interrupt(int signum) {
    printf("\nInterrupt received.Proceed to exiting...\n");
    exit(0);
}

int main() {
    int fd[2];  // File descriptors for the pipe
    pid_t pid;
    char message[100];  // Buffer for user input

    // Set up signal handler for interrupt
    signal(SIGINT, handle_interrupt);

    // Create pipe
    if (pipe(fd) == -1) {
        perror("Failed to create pipe");
        exit(1);
    }

    // Fork into child processes
    while (1) {
        if (no_child >= MAX_CHILDREN) {
            printf("Maximum number of child processes reached.\n");
            break;
        }

        pid = fork();
        if (pid == -1) {
            perror("Failed to fork");
            exit(1);
        } else if (pid == 0) {
            // Child process
            close(fd[1]);  // Close write end of the pipe

            char received_message[100];  // Buffer for receiving message from parent

            // Read message from parent
            int bytes_read = read(fd[0], received_message, sizeof(received_message));
            if (bytes_read == -1) {
                perror("Failed to read from pipe");
                exit(1);
            } else if (bytes_read == 0) {
                printf("No message received from parent.\n");
            } else {
                printf("Child process with PID %d received message: %s", getpid(), received_message);
            }

            close(fd[0]);  // Close read end of the pipe
            exit(0);
        } else {
            // Parent process
            no_child++;

            close(fd[0]);  // Close read end of the pipe

            // Get message from user
            printf("Enter a message to send to child process with PID %d: ", pid);
            fgets(message, sizeof(message), stdin);

            // Write message to pipe
            int bytes_written = write(fd[1], message, strlen(message));
            if (bytes_written == -1) {
                perror("Failed to write to pipe");
                exit(1);
            } else {
                printf("Parent process sent message to child process with PID %d.\n", pid);
            }

            close(fd[1]);  // Close write end of the pipe
        }
    }

    // Wait for all child processes to exit
    while (no_child > 0) {
        wait(NULL);
        no_child--;
    }

    return 0;
}
